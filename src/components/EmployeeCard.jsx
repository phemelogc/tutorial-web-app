import "../styles/EmployeeCard.css";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRightLong } from "@fortawesome/free-solid-svg-icons";
import { useEffect, useState } from "react";
import { db } from "../firebase/firebase";
import { doc, getDoc } from "firebase/firestore";
import jsPDF from "jspdf";

export default function EmployeeCard({ id, name, email, avatar, department }) {
  const navigate = useNavigate();
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const fetchProgress = async () => {
      const progressRef = doc(db, "quizProgress", id);
      const snapshot = await getDoc(progressRef);
      if (snapshot.exists()) {
        const data = snapshot.data();
        const moduleIds = Object.keys(data);
        if (moduleIds.length > 0) {
          const latestModule = moduleIds[moduleIds.length - 1];
          const percent = data[latestModule].percent || 0;
          setProgress(percent);
        }
      }
    };

    fetchProgress();
  }, [id]);

  const handleView = () => {
    navigate(`/profiles/${id}`);
  };

  const handleDownloadCertificate = () => {
    const docPDF = new jsPDF({
      orientation: "landscape",
      unit: "pt",
      format: "a4",
    });

    const pageWidth = docPDF.internal.pageSize.getWidth();
    const centerX = pageWidth / 2;

    docPDF.setFont("helvetica", "bold");
    docPDF.setFontSize(28);
    docPDF.text("Certificate of Completion", centerX, 100, { align: "center" });

    docPDF.setDrawColor(100);
    docPDF.setLineWidth(2);
    docPDF.rect(40, 40, docPDF.internal.pageSize.width - 80, docPDF.internal.pageSize.height - 80);

    docPDF.setFontSize(16);
    docPDF.setFont("times", "normal");
    docPDF.text(`This is to certify that`, centerX, 160, { align: "center" });

    docPDF.setFontSize(22);
    docPDF.setFont("times", "bolditalic");
    docPDF.text(name, centerX, 200, { align: "center" });

    docPDF.setFontSize(16);
    docPDF.setFont("times", "normal");
    docPDF.text(
      `has successfully completed all training modules assigned by the ${department} department.`,
      centerX,
      240,
      { align: "center" }
    );

    docPDF.setFontSize(14);
    docPDF.text(`Email: ${email}`, centerX, 270, { align: "center" });

    docPDF.setFontSize(12);
    docPDF.text(`Date: ${new Date().toLocaleDateString()}`, 60, docPDF.internal.pageSize.height - 60);

    docPDF.setFont("courier", "italic");
    docPDF.text(`Generated by Training Tracker`, pageWidth - 60, docPDF.internal.pageSize.height - 60, {
      align: "right",
    });

    docPDF.save(`${name}_certificate.pdf`);
  };

  return (
    <li className="employee-card" onClick={handleView}>
      <div className="employee-card-left">
        {avatar ? (
          <img src={avatar} alt={`${name}'s avatar`} className="employee-avatar" />
        ) : (
          <div className="employee-avatar-empty">
            {name?.charAt(0)?.toUpperCase() || "?"}
          </div>
        )}
      </div>

      <div className="employee-card-details">
        <div className="employee-info">
          <h3 className="employee-name">{name}</h3>
          <p className="employee-department">{department}</p>
          <p className="employee-email">{email}</p>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }}></div>
          </div>
          <p className="progress-text">Progress: {progress}%</p>
        </div>

        <div className="arrow-icon">
          <FontAwesomeIcon icon={faArrowRightLong} />
        </div>

        <button
          className="certificate-button"
          onClick={(e) => {
            e.stopPropagation();
            handleDownloadCertificate();
          }}
        >
          Download Certificate
        </button>
      </div>
    </li>
  );
}
