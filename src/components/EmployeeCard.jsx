import "../styles/EmployeeCard.css";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRightLong } from "@fortawesome/free-solid-svg-icons";
import { useEffect, useState } from "react";
import { db } from "../firebase/firebase";
import { doc, getDoc } from "firebase/firestore";
import jsPDF from "jspdf";
import emblem from "../assets/legendary.png"; // Make sure emblem.png is in src/assets/

export default function EmployeeCard({ id, name, email, avatar, department }) {
  const navigate = useNavigate();
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const fetchProgress = async () => {
      const progressRef = doc(db, "quizProgress", id);
      const snapshot = await getDoc(progressRef);
      if (snapshot.exists()) {
        const data = snapshot.data();
        const moduleIds = Object.keys(data);
        if (moduleIds.length > 0) {
          const latestModule = moduleIds[moduleIds.length - 1];
          const percent = data[latestModule].percent || 0;
          setProgress(percent);
        }
      }
    };

    fetchProgress();
  }, [id]);

  const handleView = () => {
    navigate(`/profiles/${id}`);
  };

  const handleDownloadCertificate = async () => {
    const docPDF = new jsPDF({
      orientation: "landscape",
      unit: "pt",
      format: "a4",
    });
  
    const pageWidth = docPDF.internal.pageSize.getWidth();
    const pageHeight = docPDF.internal.pageSize.getHeight();
    const centerX = pageWidth / 2;
  
    // Convert emblem image to base64
    const toBase64 = (url) =>
      fetch(url)
        .then((res) => res.blob())
        .then(
          (blob) =>
            new Promise((resolve, reject) => {
              const reader = new FileReader();
              reader.onloadend = () => resolve(reader.result);
              reader.onerror = reject;
              reader.readAsDataURL(blob);
            })
        );
  
    const emblemBase64 = await toBase64(emblem);
  
    // Background color
    docPDF.setFillColor(245, 245, 245); // light gray
    docPDF.rect(0, 0, pageWidth, pageHeight, "F");
  
    // Ribbon header bar
    docPDF.setFillColor(0, 102, 204); // deep blue
    docPDF.rect(0, 0, pageWidth, 80, "F");
  
    docPDF.setTextColor(255, 255, 255);
    docPDF.setFont("helvetica", "bold");
    docPDF.setFontSize(24);
    docPDF.text("Training Certificate", centerX, 50, { align: "center" });
  
    // Emblem centered below header
    docPDF.addImage(emblemBase64, "PNG", centerX - 50, 90, 100, 100);
  
    // Main Certificate Text
    docPDF.setTextColor(0, 0, 0);
    docPDF.setFontSize(28);
    docPDF.setFont("helvetica", "bold");
    docPDF.text("Certificate of Completion", centerX, 220, { align: "center" });
  
    docPDF.setFontSize(16);
    docPDF.setFont("times", "normal");
    docPDF.text("This is to certify that", centerX, 260, { align: "center" });
  
    docPDF.setFont("times", "bolditalic");
    docPDF.setFontSize(22);
    docPDF.text(name, centerX, 300, { align: "center" });
  
    docPDF.setFont("times", "normal");
    docPDF.setFontSize(16);
    docPDF.text(
      `has successfully completed all training modules assigned by the ${department} department.`,
      centerX,
      340,
      { align: "center" }
    );
  
    docPDF.setFontSize(14);
    docPDF.text(`Email: ${email}`, centerX, 370, { align: "center" });
  
    docPDF.setFontSize(12);
    docPDF.text(`Date: ${new Date().toLocaleDateString()}`, 60, pageHeight - 60);
  
    docPDF.setFont("courier", "italic");
    docPDF.text("Generated by Phexx @mechConnect", pageWidth - 60, pageHeight - 60, {
      align: "right",
    });
  
    // Draw red ribbon-like triangle at bottom right
    docPDF.setFillColor(200, 0, 0); // red color
    const triangleHeight = 60;
    const triangleWidth = 100;
    docPDF.triangle(
      pageWidth - triangleWidth,
      pageHeight,
      pageWidth,
      pageHeight,
      pageWidth,
      pageHeight - triangleHeight,
      "F"
    );
  
    docPDF.save(`${name}_certificate.pdf`);
  };
  

  return (
    <li className="employee-card" onClick={handleView}>
      <div className="employee-card-left">
        {avatar ? (
          <img src={avatar} alt={`${name}'s avatar`} className="employee-avatar" />
        ) : (
          <div className="employee-avatar-empty">
            {name?.charAt(0)?.toUpperCase() || "?"}
          </div>
        )}
      </div>

      <div className="employee-card-details">
        <div className="employee-info">
          <h3 className="employee-name">{name}</h3>
          <p className="employee-department">{department}</p>
          <p className="employee-email">{email}</p>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }}></div>
          </div>
          <p className="progress-text">Progress: {progress}%</p>
        </div>

        <div className="arrow-icon">
          <FontAwesomeIcon icon={faArrowRightLong} />
        </div>

        <button
          className="certificate-button"
          onClick={(e) => {
            e.stopPropagation();
            handleDownloadCertificate();
          }}
        >
          Download Certificate
        </button>
      </div>
    </li>
  );
}
