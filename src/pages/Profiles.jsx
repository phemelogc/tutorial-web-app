import "../styles/employeeProfile.css";
import AdminNav from "../components/AdminNav";
import { useEffect, useState } from "react";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../firebase/firebase";
import { useParams } from "react-router-dom";
import jsPDF from "jspdf";
import emblem from "../assets/legendary.png";

export default function Profiles() {
  const { id } = useParams();
  const [profileData, setProfileData] = useState(null);
  const [loading, setLoading] = useState(true);

  const handleDownloadCertificate = async () => {
    if (!profileData) return;

    const docPDF = new jsPDF({
      orientation: "landscape",
      unit: "pt",
      format: "a4",
    });

    const pageWidth = docPDF.internal.pageSize.getWidth();
    const pageHeight = docPDF.internal.pageSize.getHeight();
    const centerX = pageWidth / 2;

    // Convert emblem image to base64
    const toBase64 = (url) =>
      fetch(url)
        .then((res) => res.blob())
        .then(
          (blob) =>
            new Promise((resolve, reject) => {
              const reader = new FileReader();
              reader.onloadend = () => resolve(reader.result);
              reader.onerror = reject;
              reader.readAsDataURL(blob);
            })
        );

    const emblemBase64 = await toBase64(emblem);

    // Background color
    docPDF.setFillColor(245, 245, 245); // light gray
    docPDF.rect(0, 0, pageWidth, pageHeight, "F");

    // Ribbon header bar
    docPDF.setFillColor(0, 102, 204); // deep blue
    docPDF.rect(0, 0, pageWidth, 80, "F");

    docPDF.setTextColor(255, 255, 255);
    docPDF.setFont("helvetica", "bold");
    docPDF.setFontSize(24);
    docPDF.text("Training Certificate", centerX, 50, { align: "center" });

    // Emblem centered below header
    docPDF.addImage(emblemBase64, "PNG", centerX - 50, 90, 100, 100);

    // Main Certificate Text
    docPDF.setTextColor(0, 0, 0);
    docPDF.setFontSize(28);
    docPDF.setFont("helvetica", "bold");
    docPDF.text("Certificate of Completion", centerX, 220, { align: "center" });

    docPDF.setFontSize(16);
    docPDF.setFont("times", "normal");
    docPDF.text("This is to certify that", centerX, 260, { align: "center" });

    docPDF.setFont("times", "bolditalic");
    docPDF.setFontSize(22);
    docPDF.text(
      `${profileData.firstName} ${profileData.lastName}`,
      centerX,
      300,
      { align: "center" }
    );

    docPDF.setFont("times", "normal");
    docPDF.setFontSize(16);
    docPDF.text(
      `has successfully completed all training modules assigned by the ${profileData.department} department.`,
      centerX,
      340,
      { align: "center" }
    );

    docPDF.setFontSize(14);
    docPDF.text(`Email: ${profileData.email}`, centerX, 370, { align: "center" });

    docPDF.setFontSize(12);
    docPDF.text(`Date: ${new Date().toLocaleDateString()}`, 60, pageHeight - 60);

    docPDF.setFont("courier", "italic");
    docPDF.text("Generated by Training Tracker", pageWidth - 60, pageHeight - 60, {
      align: "right",
    });

    // Draw red ribbon-like triangle at bottom right
    docPDF.setFillColor(200, 0, 0); // red color
    const triangleHeight = 60;
    const triangleWidth = 100;
    docPDF.triangle(
      pageWidth - triangleWidth,
      pageHeight,
      pageWidth,
      pageHeight,
      pageWidth,
      pageHeight - triangleHeight,
      "F"
    );

    docPDF.save(
      `${profileData.firstName}_${profileData.lastName}_certificate.pdf`
    );
  };

  useEffect(() => {
    const fetchEmployee = async () => {
      try {
        if (!id) return;
        const docRef = doc(db, "users", id);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
          const data = docSnap.data();
          const [firstName, lastName] = (data.fullName || " ").split(" ");
          setProfileData({
            firstName,
            lastName,
            email: data.email || "",
            department: data.department || "",
            role: data.role || "",
          });
        } else {
          console.warn("No user found with that ID.");
        }
      } catch (err) {
        console.error("Error fetching employee:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchEmployee();
  }, [id]);

  if (loading) {
    return (
      <div className="section-spinner-wrapper">
        <div className="section-spinner"></div>
      </div>
    );
  }

  if (!profileData) {
    return <p className="employee-empty">Employee not found</p>;
  }

  return (
    <div className="profile-container">
      <AdminNav />

      <div className="profile-header">
        <h1>Employee Profile</h1>
        <p>Viewing employee information</p>
      </div>

      <div className="profile-content">
        <div className="profile-photo-section">
          <div className="profile-photo-container">
            <div className="profile-photo-placeholder">
              {profileData.firstName?.charAt(0)}
              {profileData.lastName?.charAt(0)}
            </div>
          </div>
        </div>

        <div className="profile-form-section">
          <div className="profile-section">
            <h2 className="profile-section-title">Personal Information</h2>
            <div className="profile-form-row">
              <div className="profile-form-group">
                <label>First Name</label>
                <input type="text" value={profileData.firstName} disabled />
              </div>
              <div className="profile-form-group">
                <label>Last Name</label>
                <input type="text" value={profileData.lastName} disabled />
              </div>
            </div>
          </div>

          <div className="profile-divider"></div>

          <div className="profile-section">
            <h2 className="profile-section-title">Contact & Role</h2>
            <div className="profile-form-row">
              <div className="profile-form-group">
                <label>Email</label>
                <input type="email" value={profileData.email} disabled />
              </div>
              <div className="profile-form-group">
                <label>Department</label>
                <input type="text" value={profileData.department} disabled />
              </div>
              <div className="profile-form-group">
                <label>Role</label>
                <input type="text" value={profileData.role} disabled />
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="button-row">
        <button
          onClick={(e) => {
            e.stopPropagation();
            handleDownloadCertificate();
          }}
        >
          Download certificate
        </button>
      </div>
    </div>
  );
}
